#include <iostream>
#include <vector>
#include <string>
#include <string.h>

#include "Connection.h"
#include "textFileConnection.h"
#include "databaseConnection.h"

using namespace std;


//Testing Connection class methods
int main()
{
  cout<< "-----Text File Data-----" <<endl;
  //textFileConnection.getTable() test
  vector<string> identifiers;
  identifiers.push_back("Website_Database.txt");
  Connection* p_txtWebConn;
  p_txtWebConn = new textFileConnection(identifiers);  
  string tableName = "visits";
  string table = p_txtWebConn->getTableContents(tableName);
  cout << table <<endl;

//-----------------------------------------------------------------------------------
  //textFileConnection.getHashId() Test
  identifiers.pop_back();
  identifiers.push_back("User_Database.txt");
  Connection* p_txtUsrConn;
  p_txtUsrConn = new textFileConnection(identifiers);
  string websiteHashId = p_txtWebConn->getHashId();
  string userHashId = p_txtUsrConn->getHashId();

  cout<< websiteHashId << " != " << userHashId <<endl;

//-----------------------------------------------------------------------------------
  cout<< "\n\n-----SQLite Data-----" <<endl;
//-----------------------------------------------------------------------------------
  //databaseConnection.getTable() test
  identifiers.pop_back();
  identifiers.push_back("bedrock.db");
  Connection* p_sqlTstConn;
  p_sqlTstConn = new databaseConnection(identifiers);  
  tableName = "EMPLoyee";
  table = p_sqlTstConn->getTableContents(tableName);
  cout << table <<endl;

//-----------------------------------------------------------------------------------
  //databaseConnection.getHashId() Test
  identifiers.pop_back();
  identifiers.push_back("Sqlite_Test.db");
  databaseConnection* p_sqlBedConn;
  p_sqlBedConn = new databaseConnection(identifiers);  
  string bedrockHashId = p_sqlBedConn->getHashId();
  string testHashId = p_sqlTstConn->getHashId();

  cout<< testHashId << " != " << bedrockHashId <<endl;

  return 0;
}

